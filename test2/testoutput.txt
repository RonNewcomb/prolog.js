 Show parse results
Fetching test2/testinput.txt
# testing basics
üëç
[holds, "bucket", 834, yes].
{"head":{"tuple":[{"literal":{"bareword":"holds"}},{"literal":{"str":"bucket"}},{"literal":{"num":"834"}},{"literal":{"bareword":"yes"}}]},"query":[]}
Memorized.
[holds, "bucket", 834, yes]?
{"query":[{"tuple":[{"literal":{"bareword":"holds"}},{"literal":{"str":"bucket"}},{"literal":{"num":"834"}},{"literal":{"bareword":"yes"}}]}]}
Yes.
[holds, "bucket", 76, yes]?
{"query":[{"tuple":[{"literal":{"bareword":"holds"}},{"literal":{"str":"bucket"}},{"literal":{"num":"76"}},{"literal":{"bareword":"yes"}}]}]}
Yes.
[holds, "bucket", the capacity, yes]?
{"query":[{"tuple":[{"literal":{"bareword":"holds"}},{"literal":{"str":"bucket"}},{"variable":{"bareword":"capacity"}},{"literal":{"bareword":"yes"}}]}]}
Yes.
#[holds, "bucket", the capacity, yes] # statement with a permanent Capacity
üëç
[holds, "bucket", ?, yes]
ERROR: {"offset":18,"token":{"value":"?"}}
 
[holds, "box", 411, no].
{"head":{"tuple":[{"literal":{"bareword":"holds"}},{"literal":{"str":"box"}},{"literal":{"num":"411"}},{"literal":{"bareword":"no"}}]},"query":[]}
Memorized.
[holds, "envelope", 1, yes].
{"head":{"tuple":[{"literal":{"bareword":"holds"}},{"literal":{"str":"envelope"}},{"literal":{"num":"1"}},{"literal":{"bareword":"yes"}}]},"query":[]}
Memorized.
[holds, a container, a capacity, any whether]?
ERROR: {"offset":10,"token":{"value":"c"}}
 
# testing NOT
üëç
[holds, "bucket", 834, yes]?
{"query":[{"tuple":[{"literal":{"bareword":"holds"}},{"literal":{"str":"bucket"}},{"literal":{"num":"834"}},{"literal":{"bareword":"yes"}}]}]}
Yes.
[not, [holds, "bucket", 834, yes]]?
{"query":[{"tuple":[{"literal":{"bareword":"not"}},{"tuple":[{"literal":{"bareword":"holds"}},{"literal":{"str":"bucket"}},{"literal":{"num":"834"}},{"literal":{"bareword":"yes"}}]}]}]}
Yes.
[holds, "bucket", 76, yes]?
{"query":[{"tuple":[{"literal":{"bareword":"holds"}},{"literal":{"str":"bucket"}},{"literal":{"num":"76"}},{"literal":{"bareword":"yes"}}]}]}
Yes.
[not, [holds, "bucket", 76, yes]]?
{"query":[{"tuple":[{"literal":{"bareword":"not"}},{"tuple":[{"literal":{"bareword":"holds"}},{"literal":{"str":"bucket"}},{"literal":{"num":"76"}},{"literal":{"bareword":"yes"}}]}]}]}
Yes.
# testing First item not special
üëç
[Bob, dreams, big]
ERROR: {}
 
[?, dreams, big]
ERROR: {"offset":1,"token":{"value":"?"}}
 
[Bob, ? , big]
ERROR: {"offset":6,"token":{"value":"?"}}
 
[Bob, dreams, ?]
ERROR: {"offset":14,"token":{"value":"?"}}
 
### Accumulated standard library lives under here!
üëç
# unification and [ x, y, z; w ] support
üëç
[unify, an xxx, an xxx].
ERROR: {"offset":11,"token":{"value":"x"}}
 
# [ a, b, c ] --> [and, {a, b, c}]
üëç
[and, {}].
ERROR: {"offset":6,"token":{"value":"{"}}
 
[and, {a question | the rest}] if [ask, the question], [and, the rest].
ERROR: {"offset":6,"token":{"value":"{"}}
 
# [ a; b; c ] --> [or, {a, b, c}]
üëç
[or, {a question | the alternatives}] if [ask, the question].
ERROR: {"offset":5,"token":{"value":"{"}}
 
[or, {a question | the alternatives}] if [or, the alternatives].
ERROR: {"offset":5,"token":{"value":"{"}}
 
# arithmetic
üëç
[add, an aaa, a bbb, the sum] if [javascript, "$1 + $2", {an aaa, a bbb}, the sum]. # an aaa + a bbb = the ccc, etc.
ERROR: {"offset":9,"token":{"value":"a"}}
 
[sub, an aaa, a bbb, the difference] if [javascript, "$1 - $2", {an aaa, a bbb}, the difference].
ERROR: {"offset":9,"token":{"value":"a"}}
 
[mul, an aaa, a bbb, the product] if [javascript, "$1 * $2", {an aaa, a bbb}, the product].
ERROR: {"offset":9,"token":{"value":"a"}}
 
[div, an aaa, a bbb, the quotient] if [javascript, "$1 / $2", {an aaa, a bbb}, the quotient].
ERROR: {"offset":9,"token":{"value":"a"}}
 
# The canonical quicksort
üëç
[qsort, {}, {}].
ERROR: {"offset":8,"token":{"value":"{"}}
 
[qsort, {an xxx|the rest}, an aaanswer] if [partition, an xxx, the rest, {}, a bbbefore, {}, an aaafter], [qsort, a bbbefore, a bbbsort], [qsort, an aaafter, an aaasort], [append, a bbbsort, {an xxx | an aaasort}, an aaanswer].
ERROR: {"offset":8,"token":{"value":"{"}}
 
[partition, an xxx, {}, a bbbefore, a bbbefore, an aaafter, an aaafter].
ERROR: {"offset":15,"token":{"value":"x"}}
 
[partition, an xxx, {a yyy | the rest}, a bbb, {a yyy | a bbbrest}, an aaa, an aaarest] if [leq, an xxx, a yyy], [partition, an xxx, the rest, a bbb, a bbbrest, an aaa, an aaarest].
ERROR: {"offset":15,"token":{"value":"x"}}
 
[partition, an xxx, {a yyy | the rest}, a bbb, a bbbrest, an aaa, {a yyy | an aaarest}] if [gtr, an xxx, a yyy], [partition, an xxx, the rest, a bbb, a bbbrest, an aaa, an aaarest].
ERROR: {"offset":15,"token":{"value":"x"}}
 
[leq, an xxx, a yyy] if [compare, an xxx, a yyy, gt].
ERROR: {"offset":9,"token":{"value":"x"}}
 
[leq, an xxx, a yyy] if [compare, an xxx, a yyy, eq].
ERROR: {"offset":9,"token":{"value":"x"}}
 
[gtr, an xxx, a yyy] if [compare, an xxx, a yyy, lt].
ERROR: {"offset":9,"token":{"value":"x"}}
 
# Some list-processing stuff...
üëç
[append, {}, a zzzz, a zzzz].
ERROR: {"offset":9,"token":{"value":"{"}}
 
[append, {an aaa|a bbb}, a zzzz, {an aaa|the differentz}] if [append, a bbb, a zzzz, the differentz].
ERROR: {"offset":9,"token":{"value":"{"}}
 
[reverse, {}, {}].
ERROR: {"offset":10,"token":{"value":"{"}}
 
[reverse, {an aaa|a bbb}, a zzzz] if [reverse, a bbb, a bbbrev], [append, a bbbrev, {an aaa}, a zzzz].
ERROR: {"offset":10,"token":{"value":"{"}}
 
[length, {}, 0].
ERROR: {"offset":9,"token":{"value":"{"}}
 
[length, {an hhhh|the tttt}, the nnn] if [length, the tttt, the mmm], [add, the mmm, 1, the nnn].
ERROR: {"offset":9,"token":{"value":"{"}}
 
# Standard prolog not/1
üëç
[not, the tttterm] if [ask, the tttterm], commit, get_more.
ERROR: {"offset":42,"token":{"value":"c"}}
 
[not, the tttterm].
{"head":{"tuple":[{"literal":{"bareword":"not"}},{"variable":{"bareword":"tttterm"}}]},"query":[]}
Memorized.
# Standard prolog var/1 = unbound/1
üëç
[unbound, an xxx] if [bagof, l, [varTest, an xxx], {l, l}].
ERROR: {"offset":13,"token":{"value":"x"}}
 
[varTest, a].
{"head":{"tuple":[{"literal":{"bareword":"varTest"}},{"literal":{"bareword":"a"}}]},"query":[]}
Memorized.
[tarTest, b].
{"head":{"tuple":[{"literal":{"bareword":"tarTest"}},{"literal":{"bareword":"b"}}]},"query":[]}
Memorized.
# standard once/1
üëç
[once, a goal] if [ask, the goal], commit.
ERROR: {"offset":9,"token":{"value":"g"}}
 
#
üëç
#
üëç
# Enter your ruleset in here.
üëç
[triple, sc, a, b].
{"head":{"tuple":[{"literal":{"bareword":"triple"}},{"literal":{"bareword":"sc"}},{"literal":{"bareword":"a"}},{"literal":{"bareword":"b"}}]},"query":[]}
Memorized.
[triple, sc, b, c].
{"head":{"tuple":[{"literal":{"bareword":"triple"}},{"literal":{"bareword":"sc"}},{"literal":{"bareword":"b"}},{"literal":{"bareword":"c"}}]},"query":[]}
Memorized.
[triple, sc, c, d].
{"head":{"tuple":[{"literal":{"bareword":"triple"}},{"literal":{"bareword":"sc"}},{"literal":{"bareword":"c"}},{"literal":{"bareword":"d"}}]},"query":[]}
Memorized.
[triple, sc, d, e].
{"head":{"tuple":[{"literal":{"bareword":"triple"}},{"literal":{"bareword":"sc"}},{"literal":{"bareword":"d"}},{"literal":{"bareword":"e"}}]},"query":[]}
Memorized.
[triple, sc, e, f].
{"head":{"tuple":[{"literal":{"bareword":"triple"}},{"literal":{"bareword":"sc"}},{"literal":{"bareword":"e"}},{"literal":{"bareword":"f"}}]},"query":[]}
Memorized.
[triple, sc, f, g].
{"head":{"tuple":[{"literal":{"bareword":"triple"}},{"literal":{"bareword":"sc"}},{"literal":{"bareword":"f"}},{"literal":{"bareword":"g"}}]},"query":[]}
Memorized.
[triple, type, sc, transitive].
{"head":{"tuple":[{"literal":{"bareword":"triple"}},{"literal":{"bareword":"type"}},{"literal":{"bareword":"sc"}},{"literal":{"bareword":"transitive"}}]},"query":[]}
Memorized.
[triple, the ppl, an xxx, a yyy] if dontSelfRecurse:[triple, type, the ppl, transitive], dontSelfRecurse:[triple, the ppl, an xxx, a zzzz], [triple, the ppl, a zzzz, a yyy].
ERROR: {"offset":21,"token":{"value":"x"}}
 
[arcsOut, an xxx, the lost] if [bagof, the oolong, [triple, the ppl, an xxx, the oolong], the lost].
ERROR: {"offset":13,"token":{"value":"x"}}
 
[bagof, c, [triple, sc, an aaa, a bbb], the lost], [length, the lost, the nnn]? # L should have 21 elements
ERROR: {"offset":27,"token":{"value":"a"}}
 
[bagof, c, [triple, sc, an aaa, a bbb], the lost], [length, the lost, the nnn]
ERROR: {"offset":27,"token":{"value":"a"}}
 
[bagof, c, [triple, sc, an aaa, a bbb], the lost], [length, the lost, the nnn].
ERROR: {"offset":27,"token":{"value":"a"}}
 
